{"version":3,"file":"event-state.js","sources":["../../../../node_modules/@sveltejs/kit/src/runtime/app/server/event.js","../../../../node_modules/@sveltejs/kit/src/runtime/shared.js","../../../../node_modules/@sveltejs/kit/src/runtime/server/event-state.js"],"sourcesContent":["/** @import { RequestEvent } from '@sveltejs/kit' */\n\n/** @type {RequestEvent | null} */\nlet request_event = null;\n\n/** @type {import('node:async_hooks').AsyncLocalStorage<RequestEvent | null>} */\nlet als;\n\nimport('node:async_hooks')\n\t.then((hooks) => (als = new hooks.AsyncLocalStorage()))\n\t.catch(() => {\n\t\t// can't use AsyncLocalStorage, but can still call getRequestEvent synchronously.\n\t\t// this isn't behind `supports` because it's basically just StackBlitz (i.e.\n\t\t// in-browser usage) that doesn't support it AFAICT\n\t});\n\n/**\n * Returns the current `RequestEvent`. Can be used inside server hooks, server `load` functions, actions, and endpoints (and functions called by them).\n *\n * In environments without [`AsyncLocalStorage`](https://nodejs.org/api/async_context.html#class-asynclocalstorage), this must be called synchronously (i.e. not after an `await`).\n * @since 2.20.0\n * @returns {RequestEvent}\n */\nexport function getRequestEvent() {\n\tconst event = request_event ?? als?.getStore();\n\n\tif (!event) {\n\t\tlet message =\n\t\t\t'Can only read the current request event inside functions invoked during `handle`, such as server `load` functions, actions, endpoints, and other server hooks.';\n\n\t\tif (!als) {\n\t\t\tmessage +=\n\t\t\t\t' In environments without `AsyncLocalStorage`, the event must be read synchronously, not after an `await`.';\n\t\t}\n\n\t\tthrow new Error(message);\n\t}\n\n\treturn event;\n}\n\n/**\n * @template T\n * @param {RequestEvent | null} event\n * @param {() => T} fn\n */\nexport function with_event(event, fn) {\n\ttry {\n\t\trequest_event = event;\n\t\treturn als ? als.run(event, fn) : fn();\n\t} finally {\n\t\trequest_event = null;\n\t}\n}\n","/** @import { Transport } from '@sveltejs/kit' */\nimport * as devalue from 'devalue';\nimport { base64_decode, base64_encode, text_decoder } from './utils.js';\n\n/**\n * @param {string} route_id\n * @param {string} dep\n */\nexport function validate_depends(route_id, dep) {\n\tconst match = /^(moz-icon|view-source|jar):/.exec(dep);\n\tif (match) {\n\t\tconsole.warn(\n\t\t\t`${route_id}: Calling \\`depends('${dep}')\\` will throw an error in Firefox because \\`${match[1]}\\` is a special URI scheme`\n\t\t);\n\t}\n}\n\nexport const INVALIDATED_PARAM = 'x-sveltekit-invalidated';\n\nexport const TRAILING_SLASH_PARAM = 'x-sveltekit-trailing-slash';\n\n/**\n * Try to `devalue.stringify` the data object using the provided transport encoders.\n * @param {any} data\n * @param {Transport} transport\n */\nexport function stringify(data, transport) {\n\tconst encoders = Object.fromEntries(Object.entries(transport).map(([k, v]) => [k, v.encode]));\n\n\treturn devalue.stringify(data, encoders);\n}\n\n/**\n * Stringifies the argument (if any) for a remote function in such a way that\n * it is both a valid URL and a valid file name (necessary for prerendering).\n * @param {any} value\n * @param {Transport} transport\n */\nexport function stringify_remote_arg(value, transport) {\n\tif (value === undefined) return '';\n\n\t// If people hit file/url size limits, we can look into using something like compress_and_encode_text from svelte.dev beyond a certain size\n\tconst json_string = stringify(value, transport);\n\n\tconst bytes = new TextEncoder().encode(json_string);\n\treturn base64_encode(bytes).replaceAll('=', '').replaceAll('+', '-').replaceAll('/', '_');\n}\n\n/**\n * Parses the argument (if any) for a remote function\n * @param {string} string\n * @param {Transport} transport\n */\nexport function parse_remote_arg(string, transport) {\n\tif (!string) return undefined;\n\n\tconst json_string = text_decoder.decode(\n\t\t// no need to add back `=` characters, atob can handle it\n\t\tbase64_decode(string.replaceAll('-', '+').replaceAll('_', '/'))\n\t);\n\n\tconst decoders = Object.fromEntries(Object.entries(transport).map(([k, v]) => [k, v.decode]));\n\n\treturn devalue.parse(json_string, decoders);\n}\n\n/**\n * @param {string} id\n * @param {string} payload\n */\nexport function create_remote_cache_key(id, payload) {\n\treturn id + '/' + payload;\n}\n","/** @import { RequestEvent } from '@sveltejs/kit' */\n/** @import { MaybePromise, PrerenderOptions, ServerHooks, SSROptions, SSRState } from 'types' */\n\nexport const EVENT_STATE = Symbol('remote');\n\n/**\n * Internal state associated with the current `RequestEvent`,\n * used for tracking things like remote function calls\n * @typedef {{\n * \tprerendering: PrerenderOptions | undefined\n *  transport: ServerHooks['transport'];\n *  handleValidationError: ServerHooks['handleValidationError'];\n *  form_instances?: Map<any, any>;\n * \tremote_data?: Record<string, MaybePromise<any>>;\n *  refreshes?: Record<string, any>;\n * }} RequestEventState\n */\n\n/**\n * @param {SSRState} state\n * @param {SSROptions} options\n * @returns {RequestEventState}\n */\nexport function create_event_state(state, options) {\n\treturn {\n\t\tprerendering: state.prerendering,\n\t\ttransport: options.hooks.transport,\n\t\thandleValidationError: options.hooks.handleValidationError\n\t};\n}\n\n/**\n * Returns internal state associated with the current `RequestEvent`\n * @param {RequestEvent} event\n * @returns {RequestEventState}\n */\nexport function get_event_state(event) {\n\t// @ts-expect-error the symbol isn't exposed on the public `RequestEvent` type\n\treturn event[EVENT_STATE];\n}\n"],"names":[],"mappings":";;AAGA,IAAI,gBAAgB;AAGpB,IAAI;AAEJ,OAAO,kBAAkB,EACvB,KAAK,CAAC,UAAW,MAAM,IAAI,MAAM,kBAAiB,CAAG,EACrD,MAAM,MAAM;AAIb,CAAC;AASK,SAAS,kBAAkB;AACjC,QAAM,QAAQ,iBAAiB,KAAK,SAAQ;AAE5C,MAAI,CAAC,OAAO;AACX,QAAI,UACH;AAED,QAAI,CAAC,KAAK;AACT,iBACC;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,OAAO;AAAA,EACxB;AAEA,SAAO;AACR;AAOO,SAAS,WAAW,OAAO,IAAI;AACrC,MAAI;AACH,oBAAgB;AAChB,WAAO,MAAM,IAAI,IAAI,OAAO,EAAE,IAAI,GAAE;AAAA,EACrC,UAAC;AACA,oBAAgB;AAAA,EACjB;AACD;AC7CO,SAAS,iBAAiB,UAAU,KAAK;AAC/C,QAAM,QAAQ,+BAA+B,KAAK,GAAG;AACrD,MAAI,OAAO;AACV,YAAQ;AAAA,MACP,GAAG,QAAQ,wBAAwB,GAAG,iDAAiD,MAAM,CAAC,CAAC;AAAA,IAClG;AAAA,EACC;AACD;AAEY,MAAC,oBAAoB;AAErB,MAAC,uBAAuB;AAO7B,SAAS,UAAU,MAAM,WAAW;AAC1C,QAAM,WAAW,OAAO,YAAY,OAAO,QAAQ,SAAS,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAE5F,SAAO,QAAQ,UAAU,MAAM,QAAQ;AACxC;AAQO,SAAS,qBAAqB,OAAO,WAAW;AACtD,MAAI,UAAU,OAAW,QAAO;AAGhC,QAAM,cAAc,UAAU,OAAO,SAAS;AAE9C,QAAM,QAAQ,IAAI,cAAc,OAAO,WAAW;AAClD,SAAO,cAAc,KAAK,EAAE,WAAW,KAAK,EAAE,EAAE,WAAW,KAAK,GAAG,EAAE,WAAW,KAAK,GAAG;AACzF;AAOO,SAAS,iBAAiB,QAAQ,WAAW;AACnD,MAAI,CAAC,OAAQ,QAAO;AAEpB,QAAM,cAAc,aAAa;AAAA;AAAA,IAEhC,cAAc,OAAO,WAAW,KAAK,GAAG,EAAE,WAAW,KAAK,GAAG,CAAC;AAAA,EAChE;AAEC,QAAM,WAAW,OAAO,YAAY,OAAO,QAAQ,SAAS,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAE5F,SAAO,QAAQ,MAAM,aAAa,QAAQ;AAC3C;AAMO,SAAS,wBAAwB,IAAI,SAAS;AACpD,SAAO,KAAK,MAAM;AACnB;ACrEY,MAAC,cAAc,OAAO,QAAQ;AAoBnC,SAAS,mBAAmB,OAAO,SAAS;AAClD,SAAO;AAAA,IACN,cAAc,MAAM;AAAA,IACpB,WAAW,QAAQ,MAAM;AAAA,IACzB,uBAAuB,QAAQ,MAAM;AAAA,EACvC;AACA;AAOO,SAAS,gBAAgB,OAAO;AAEtC,SAAO,MAAM,WAAW;AACzB;","x_google_ignoreList":[0,1,2]}