{"version":3,"file":"shared.js","sources":["../../../../node_modules/@sveltejs/kit/src/runtime/shared.js"],"sourcesContent":["/** @import { Transport } from '@sveltejs/kit' */\nimport * as devalue from 'devalue';\nimport { base64_decode, base64_encode, text_decoder } from './utils.js';\n\n/**\n * @param {string} route_id\n * @param {string} dep\n */\nexport function validate_depends(route_id, dep) {\n\tconst match = /^(moz-icon|view-source|jar):/.exec(dep);\n\tif (match) {\n\t\tconsole.warn(\n\t\t\t`${route_id}: Calling \\`depends('${dep}')\\` will throw an error in Firefox because \\`${match[1]}\\` is a special URI scheme`\n\t\t);\n\t}\n}\n\nexport const INVALIDATED_PARAM = 'x-sveltekit-invalidated';\n\nexport const TRAILING_SLASH_PARAM = 'x-sveltekit-trailing-slash';\n\n/**\n * @param {any} data\n * @param {string} [location_description]\n */\nexport function validate_load_response(data, location_description) {\n\tif (data != null && Object.getPrototypeOf(data) !== Object.prototype) {\n\t\tthrow new Error(\n\t\t\t`a load function ${location_description} returned ${\n\t\t\t\ttypeof data !== 'object'\n\t\t\t\t\t? `a ${typeof data}`\n\t\t\t\t\t: data instanceof Response\n\t\t\t\t\t\t? 'a Response object'\n\t\t\t\t\t\t: Array.isArray(data)\n\t\t\t\t\t\t\t? 'an array'\n\t\t\t\t\t\t\t: 'a non-plain object'\n\t\t\t}, but must return a plain object at the top level (i.e. \\`return {...}\\`)`\n\t\t);\n\t}\n}\n\n/**\n * Try to `devalue.stringify` the data object using the provided transport encoders.\n * @param {any} data\n * @param {Transport} transport\n */\nexport function stringify(data, transport) {\n\tconst encoders = Object.fromEntries(Object.entries(transport).map(([k, v]) => [k, v.encode]));\n\n\treturn devalue.stringify(data, encoders);\n}\n\n/**\n * Stringifies the argument (if any) for a remote function in such a way that\n * it is both a valid URL and a valid file name (necessary for prerendering).\n * @param {any} value\n * @param {Transport} transport\n */\nexport function stringify_remote_arg(value, transport) {\n\tif (value === undefined) return '';\n\n\t// If people hit file/url size limits, we can look into using something like compress_and_encode_text from svelte.dev beyond a certain size\n\tconst json_string = stringify(value, transport);\n\n\tconst bytes = new TextEncoder().encode(json_string);\n\treturn base64_encode(bytes).replaceAll('=', '').replaceAll('+', '-').replaceAll('/', '_');\n}\n\n/**\n * Parses the argument (if any) for a remote function\n * @param {string} string\n * @param {Transport} transport\n */\nexport function parse_remote_arg(string, transport) {\n\tif (!string) return undefined;\n\n\tconst json_string = text_decoder.decode(\n\t\t// no need to add back `=` characters, atob can handle it\n\t\tbase64_decode(string.replaceAll('-', '+').replaceAll('_', '/'))\n\t);\n\n\tconst decoders = Object.fromEntries(Object.entries(transport).map(([k, v]) => [k, v.decode]));\n\n\treturn devalue.parse(json_string, decoders);\n}\n\n/**\n * @param {string} id\n * @param {string} payload\n */\nexport function create_remote_cache_key(id, payload) {\n\treturn id + '/' + payload;\n}\n"],"names":[],"mappings":";;AAiBY,MAAC,oBAAoB;AAErB,MAAC,uBAAuB;AA2B7B,SAAS,UAAU,MAAM,WAAW;AAC1C,QAAM,WAAW,OAAO,YAAY,OAAO,QAAQ,SAAS,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAE5F,SAAO,QAAQ,UAAU,MAAM,QAAQ;AACxC;AAQO,SAAS,qBAAqB,OAAO,WAAW;AACtD,MAAI,UAAU,OAAW,QAAO;AAGhC,QAAM,cAAc,UAAU,OAAO,SAAS;AAE9C,QAAM,QAAQ,IAAI,cAAc,OAAO,WAAW;AAClD,SAAO,cAAc,KAAK,EAAE,WAAW,KAAK,EAAE,EAAE,WAAW,KAAK,GAAG,EAAE,WAAW,KAAK,GAAG;AACzF;AAOO,SAAS,iBAAiB,QAAQ,WAAW;AACnD,MAAI,CAAC,OAAQ,QAAO;AAEpB,QAAM,cAAc,aAAa;AAAA;AAAA,IAEhC,cAAc,OAAO,WAAW,KAAK,GAAG,EAAE,WAAW,KAAK,GAAG,CAAC;AAAA,EAChE;AAEC,QAAM,WAAW,OAAO,YAAY,OAAO,QAAQ,SAAS,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAE5F,SAAO,QAAQ,MAAM,aAAa,QAAQ;AAC3C;AAMO,SAAS,wBAAwB,IAAI,SAAS;AACpD,SAAO,KAAK,MAAM;AACnB;","x_google_ignoreList":[0]}