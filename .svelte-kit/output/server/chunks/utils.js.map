{"version":3,"file":"utils.js","sources":["../../../../node_modules/@sveltejs/kit/src/runtime/utils.js"],"sourcesContent":["/** @import { RemoteFormIssue } from '@sveltejs/kit' */\n/** @import { StandardSchemaV1 } from '@standard-schema/spec' */\nimport { BROWSER } from 'esm-env';\n\nexport const text_encoder = new TextEncoder();\nexport const text_decoder = new TextDecoder();\n\n/**\n * Like node's path.relative, but without using node\n * @param {string} from\n * @param {string} to\n */\nexport function get_relative_path(from, to) {\n\tconst from_parts = from.split(/[/\\\\]/);\n\tconst to_parts = to.split(/[/\\\\]/);\n\tfrom_parts.pop(); // get dirname\n\n\twhile (from_parts[0] === to_parts[0]) {\n\t\tfrom_parts.shift();\n\t\tto_parts.shift();\n\t}\n\n\tlet i = from_parts.length;\n\twhile (i--) from_parts[i] = '..';\n\n\treturn from_parts.concat(to_parts).join('/');\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {string}\n */\nexport function base64_encode(bytes) {\n\t// Using `Buffer` is faster than iterating\n\tif (!BROWSER && globalThis.Buffer) {\n\t\treturn globalThis.Buffer.from(bytes).toString('base64');\n\t}\n\n\tlet binary = '';\n\n\tfor (let i = 0; i < bytes.length; i++) {\n\t\tbinary += String.fromCharCode(bytes[i]);\n\t}\n\n\treturn btoa(binary);\n}\n\n/**\n * @param {string} encoded\n * @returns {Uint8Array}\n */\nexport function base64_decode(encoded) {\n\t// Using `Buffer` is faster than iterating\n\tif (!BROWSER && globalThis.Buffer) {\n\t\tconst buffer = globalThis.Buffer.from(encoded, 'base64');\n\t\treturn new Uint8Array(buffer);\n\t}\n\n\tconst binary = atob(encoded);\n\tconst bytes = new Uint8Array(binary.length);\n\n\tfor (let i = 0; i < binary.length; i++) {\n\t\tbytes[i] = binary.charCodeAt(i);\n\t}\n\n\treturn bytes;\n}\n\n/**\n * Convert `FormData` into a POJO\n * @param {FormData} data\n */\nexport function convert_formdata(data) {\n\t/** @type {Record<string, any>} */\n\tconst result = Object.create(null); // guard against prototype pollution\n\n\tfor (let key of data.keys()) {\n\t\tconst is_array = key.endsWith('[]');\n\t\tlet values = data.getAll(key);\n\n\t\tif (is_array) key = key.slice(0, -2);\n\n\t\tif (values.length > 1 && !is_array) {\n\t\t\tthrow new Error(`Form cannot contain duplicated keys â€” \"${key}\" has ${values.length} values`);\n\t\t}\n\n\t\t// an empty `<input type=\"file\">` will submit a non-existent file, bizarrely\n\t\tvalues = values.filter(\n\t\t\t(entry) => typeof entry === 'string' || entry.name !== '' || entry.size > 0\n\t\t);\n\n\t\tdeep_set(result, split_path(key), is_array ? values : values[0]);\n\t}\n\n\treturn result;\n}\n\nconst path_regex = /^[a-zA-Z_$]\\w*(\\.[a-zA-Z_$]\\w*|\\[\\d+\\])*$/;\n\n/**\n * @param {string} path\n */\nexport function split_path(path) {\n\tif (!path_regex.test(path)) {\n\t\tthrow new Error(`Invalid path ${path}`);\n\t}\n\n\treturn path.split(/\\.|\\[|\\]/).filter(Boolean);\n}\n\n/**\n * @param {Record<string, any>} object\n * @param {string[]} keys\n * @param {any} value\n */\nexport function deep_set(object, keys, value) {\n\tfor (let i = 0; i < keys.length - 1; i += 1) {\n\t\tconst key = keys[i];\n\t\tconst is_array = /^\\d+$/.test(keys[i + 1]);\n\n\t\tif (object[key]) {\n\t\t\tif (is_array !== Array.isArray(object[key])) {\n\t\t\t\tthrow new Error(`Invalid array key ${keys[i + 1]}`);\n\t\t\t}\n\t\t} else {\n\t\t\tobject[key] ??= is_array ? [] : Object.create(null); // guard against prototype pollution\n\t\t}\n\t\tobject = object[key];\n\t}\n\n\tobject[keys[keys.length - 1]] = value;\n}\n\n/**\n * @param {readonly StandardSchemaV1.Issue[]} issues\n */\nexport function flatten_issues(issues) {\n\t/** @type {Record<string, RemoteFormIssue[]>} */\n\tconst result = {};\n\n\tfor (const issue of issues) {\n\t\t/** @type {RemoteFormIssue} */\n\t\tconst normalized = { name: '', path: [], message: issue.message };\n\n\t\t(result.$ ??= []).push(normalized);\n\n\t\tlet name = '';\n\n\t\tif (issue.path !== undefined) {\n\t\t\tfor (const segment of issue.path) {\n\t\t\t\tconst key = /** @type {string | number} */ (\n\t\t\t\t\ttypeof segment === 'object' ? segment.key : segment\n\t\t\t\t);\n\n\t\t\t\tnormalized.path.push(key);\n\n\t\t\t\tif (typeof key === 'number') {\n\t\t\t\t\tname += `[${key}]`;\n\t\t\t\t} else if (typeof key === 'string') {\n\t\t\t\t\tname += name === '' ? key : '.' + key;\n\t\t\t\t}\n\n\t\t\t\t(result[name] ??= []).push(normalized);\n\t\t\t}\n\n\t\t\tnormalized.name = name;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * We need to encode `File` objects when returning `issues` from a `form` submission,\n * because some validators include the original value in the issue. It doesn't\n * need to deserialize to a `File` object\n * @type {import('@sveltejs/kit').Transporter}\n */\nexport const file_transport = {\n\tencode: (file) =>\n\t\tfile instanceof File && {\n\t\t\tsize: file.size,\n\t\t\ttype: file.type,\n\t\t\tname: file.name,\n\t\t\tlastModified: file.lastModified\n\t\t},\n\tdecode: (data) => data\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}