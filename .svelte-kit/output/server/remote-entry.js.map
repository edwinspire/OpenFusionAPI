{"version":3,"file":"remote-entry.js","sources":["../../../node_modules/@sveltejs/kit/src/runtime/app/server/remote/shared.js","../../../node_modules/@sveltejs/kit/src/runtime/app/server/remote/command.js","../../../node_modules/@sveltejs/kit/src/runtime/app/server/remote/form.js","../../../node_modules/@sveltejs/kit/src/runtime/app/server/remote/prerender.js","../../../node_modules/@sveltejs/kit/src/runtime/app/server/remote/query.js"],"sourcesContent":["/** @import { RequestEvent } from '@sveltejs/kit' */\n/** @import { ServerHooks, MaybePromise, RequestState, RemoteInfo } from 'types' */\nimport { parse } from 'devalue';\nimport { error } from '@sveltejs/kit';\nimport { with_request_store, get_request_store } from '@sveltejs/kit/internal/server';\nimport { stringify_remote_arg } from '../../../shared.js';\n\n/**\n * @param {any} validate_or_fn\n * @param {(arg?: any) => any} [maybe_fn]\n * @returns {(arg?: any) => MaybePromise<any>}\n */\nexport function create_validator(validate_or_fn, maybe_fn) {\n\t// prevent functions without validators being called with arguments\n\tif (!maybe_fn) {\n\t\treturn (arg) => {\n\t\t\tif (arg !== undefined) {\n\t\t\t\terror(400, 'Bad Request');\n\t\t\t}\n\t\t};\n\t}\n\n\t// if 'unchecked', pass input through without validating\n\tif (validate_or_fn === 'unchecked') {\n\t\treturn (arg) => arg;\n\t}\n\n\t// use https://standardschema.dev validator if provided\n\tif ('~standard' in validate_or_fn) {\n\t\treturn async (arg) => {\n\t\t\t// Get event before async validation to ensure it's available in server environments without AsyncLocalStorage, too\n\t\t\tconst { event, state } = get_request_store();\n\t\t\tconst validate = validate_or_fn['~standard'].validate;\n\n\t\t\tconst result = await validate(arg);\n\n\t\t\t// if the `issues` field exists, the validation failed\n\t\t\tif (result.issues) {\n\t\t\t\terror(\n\t\t\t\t\t400,\n\t\t\t\t\tawait state.handleValidationError({\n\t\t\t\t\t\tissues: result.issues,\n\t\t\t\t\t\tevent\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn result.value;\n\t\t};\n\t}\n\n\tthrow new Error(\n\t\t'Invalid validator passed to remote function. Expected \"unchecked\" or a Standard Schema (https://standardschema.dev)'\n\t);\n}\n\n/**\n * In case of a single remote function call, just returns the result.\n *\n * In case of a full page reload, returns the response for a remote function call,\n * either from the cache or by invoking the function.\n * Also saves an uneval'ed version of the result for later HTML inlining for hydration.\n *\n * @template {MaybePromise<any>} T\n * @param {RemoteInfo} info\n * @param {any} arg\n * @param {RequestState} state\n * @param {() => Promise<T>} get_result\n * @returns {Promise<T>}\n */\nexport async function get_response(info, arg, state, get_result) {\n\t// wait a beat, in case `myQuery().set(...)` is immediately called\n\t// eslint-disable-next-line @typescript-eslint/await-thenable\n\tawait 0;\n\n\tconst cache = get_cache(info, state);\n\n\treturn (cache[stringify_remote_arg(arg, state.transport)] ??= get_result());\n}\n\n/**\n * @param {any} data\n * @param {ServerHooks['transport']} transport\n */\nexport function parse_remote_response(data, transport) {\n\t/** @type {Record<string, any>} */\n\tconst revivers = {};\n\tfor (const key in transport) {\n\t\trevivers[key] = transport[key].decode;\n\t}\n\n\treturn parse(data, revivers);\n}\n\n/**\n * Like `with_event` but removes things from `event` you cannot see/call in remote functions, such as `setHeaders`.\n * @template T\n * @param {RequestEvent} event\n * @param {RequestState} state\n * @param {boolean} allow_cookies\n * @param {any} arg\n * @param {(arg: any) => any} validate\n * @param {(arg?: any) => T} fn\n */\nexport async function run_remote_function(event, state, allow_cookies, arg, validate, fn) {\n\t/** @type {RequestEvent} */\n\tconst cleansed = {\n\t\t...event,\n\t\tsetHeaders: () => {\n\t\t\tthrow new Error('setHeaders is not allowed in remote functions');\n\t\t},\n\t\tcookies: {\n\t\t\t...event.cookies,\n\t\t\tset: (name, value, opts) => {\n\t\t\t\tif (!allow_cookies) {\n\t\t\t\t\tthrow new Error('Cannot set cookies in `query` or `prerender` functions');\n\t\t\t\t}\n\n\t\t\t\tif (opts.path && !opts.path.startsWith('/')) {\n\t\t\t\t\tthrow new Error('Cookies set in remote functions must have an absolute path');\n\t\t\t\t}\n\n\t\t\t\treturn event.cookies.set(name, value, opts);\n\t\t\t},\n\t\t\tdelete: (name, opts) => {\n\t\t\t\tif (!allow_cookies) {\n\t\t\t\t\tthrow new Error('Cannot delete cookies in `query` or `prerender` functions');\n\t\t\t\t}\n\n\t\t\t\tif (opts.path && !opts.path.startsWith('/')) {\n\t\t\t\t\tthrow new Error('Cookies deleted in remote functions must have an absolute path');\n\t\t\t\t}\n\n\t\t\t\treturn event.cookies.delete(name, opts);\n\t\t\t}\n\t\t},\n\t\troute: { id: null },\n\t\turl: new URL(event.url.origin)\n\t};\n\n\t// In two parts, each with_event, so that runtimes without async local storage can still get the event at the start of the function\n\tconst validated = await with_request_store({ event: cleansed, state }, () => validate(arg));\n\treturn with_request_store({ event: cleansed, state }, () => fn(validated));\n}\n\n/**\n * @param {RemoteInfo} info\n * @param {RequestState} state\n */\nexport function get_cache(info, state = get_request_store().state) {\n\tlet cache = state.remote_data?.get(info);\n\n\tif (cache === undefined) {\n\t\tcache = {};\n\t\t(state.remote_data ??= new Map()).set(info, cache);\n\t}\n\n\treturn cache;\n}\n","/** @import { RemoteCommand } from '@sveltejs/kit' */\n/** @import { RemoteInfo, MaybePromise } from 'types' */\n/** @import { StandardSchemaV1 } from '@standard-schema/spec' */\nimport { get_request_store } from '@sveltejs/kit/internal/server';\nimport { create_validator, run_remote_function } from './shared.js';\n\n/**\n * Creates a remote command. When called from the browser, the function will be invoked on the server via a `fetch` call.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#command) for full documentation.\n *\n * @template Output\n * @overload\n * @param {() => Output} fn\n * @returns {RemoteCommand<void, Output>}\n * @since 2.27\n */\n/**\n * Creates a remote command. When called from the browser, the function will be invoked on the server via a `fetch` call.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#command) for full documentation.\n *\n * @template Input\n * @template Output\n * @overload\n * @param {'unchecked'} validate\n * @param {(arg: Input) => Output} fn\n * @returns {RemoteCommand<Input, Output>}\n * @since 2.27\n */\n/**\n * Creates a remote command. When called from the browser, the function will be invoked on the server via a `fetch` call.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#command) for full documentation.\n *\n * @template {StandardSchemaV1} Schema\n * @template Output\n * @overload\n * @param {Schema} validate\n * @param {(arg: StandardSchemaV1.InferOutput<Schema>) => Output} fn\n * @returns {RemoteCommand<StandardSchemaV1.InferInput<Schema>, Output>}\n * @since 2.27\n */\n/**\n * @template Input\n * @template Output\n * @param {any} validate_or_fn\n * @param {(arg?: Input) => Output} [maybe_fn]\n * @returns {RemoteCommand<Input, Output>}\n * @since 2.27\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function command(validate_or_fn, maybe_fn) {\n\t/** @type {(arg?: Input) => Output} */\n\tconst fn = maybe_fn ?? validate_or_fn;\n\n\t/** @type {(arg?: any) => MaybePromise<Input>} */\n\tconst validate = create_validator(validate_or_fn, maybe_fn);\n\n\t/** @type {RemoteInfo} */\n\tconst __ = { type: 'command', id: '', name: '' };\n\n\t/** @type {RemoteCommand<Input, Output> & { __: RemoteInfo }} */\n\tconst wrapper = (arg) => {\n\t\tconst { event, state } = get_request_store();\n\n\t\tif (state.is_endpoint_request) {\n\t\t\tif (!['POST', 'PUT', 'PATCH', 'DELETE'].includes(event.request.method)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot call a command (\\`${__.name}(${maybe_fn ? '...' : ''})\\`) from a ${event.request.method} handler`\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (!event.isRemoteRequest) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot call a command (\\`${__.name}(${maybe_fn ? '...' : ''})\\`) during server-side rendering`\n\t\t\t);\n\t\t}\n\n\t\tstate.refreshes ??= {};\n\n\t\tconst promise = Promise.resolve(run_remote_function(event, state, true, arg, validate, fn));\n\n\t\t// @ts-expect-error\n\t\tpromise.updates = () => {\n\t\t\tthrow new Error(`Cannot call '${__.name}(...).updates(...)' on the server`);\n\t\t};\n\n\t\treturn /** @type {ReturnType<RemoteCommand<Input, Output>>} */ (promise);\n\t};\n\n\tObject.defineProperty(wrapper, '__', { value: __ });\n\n\t// On the server, pending is always 0\n\tObject.defineProperty(wrapper, 'pending', {\n\t\tget: () => 0\n\t});\n\n\treturn wrapper;\n}\n","/** @import { RemoteFormInput, RemoteForm } from '@sveltejs/kit' */\n/** @import { MaybePromise, RemoteInfo } from 'types' */\n/** @import { StandardSchemaV1 } from '@standard-schema/spec' */\nimport { get_request_store } from '@sveltejs/kit/internal/server';\nimport { DEV } from 'esm-env';\nimport { get_cache, run_remote_function } from './shared.js';\nimport { convert_formdata, flatten_issues } from '../../../utils.js';\n\n/**\n * Creates a form object that can be spread onto a `<form>` element.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#form) for full documentation.\n *\n * @template Output\n * @overload\n * @param {() => Output} fn\n * @returns {RemoteForm<void, Output>}\n * @since 2.27\n */\n/**\n * Creates a form object that can be spread onto a `<form>` element.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#form) for full documentation.\n *\n * @template {RemoteFormInput} Input\n * @template Output\n * @overload\n * @param {'unchecked'} validate\n * @param {(data: Input) => MaybePromise<Output>} fn\n * @returns {RemoteForm<Input, Output>}\n * @since 2.27\n */\n/**\n * Creates a form object that can be spread onto a `<form>` element.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#form) for full documentation.\n *\n * @template {StandardSchemaV1<RemoteFormInput, Record<string, any>>} Schema\n * @template Output\n * @overload\n * @param {Schema} validate\n * @param {(data: StandardSchemaV1.InferOutput<Schema>) => MaybePromise<Output>} fn\n * @returns {RemoteForm<StandardSchemaV1.InferInput<Schema>, Output>}\n * @since 2.27\n */\n/**\n * @template {RemoteFormInput} Input\n * @template Output\n * @param {any} validate_or_fn\n * @param {(data?: Input) => MaybePromise<Output>} [maybe_fn]\n * @returns {RemoteForm<Input, Output>}\n * @since 2.27\n */\n/*@__NO_SIDE_EFFECTS__*/\n// @ts-ignore we don't want to prefix `fn` with an underscore, as that will be user-visible\nexport function form(validate_or_fn, maybe_fn) {\n\t/** @type {(data?: Input) => Output} */\n\tconst fn = maybe_fn ?? validate_or_fn;\n\n\t/** @type {StandardSchemaV1 | null} */\n\tconst schema = !maybe_fn || validate_or_fn === 'unchecked' ? null : validate_or_fn;\n\n\t/**\n\t * @param {string | number | boolean} [key]\n\t */\n\tfunction create_instance(key) {\n\t\t/** @type {RemoteForm<Input, Output>} */\n\t\tconst instance = {};\n\n\t\tinstance.method = 'POST';\n\n\t\tObject.defineProperty(instance, 'enhance', {\n\t\t\tvalue: () => {\n\t\t\t\treturn { action: instance.action, method: instance.method };\n\t\t\t}\n\t\t});\n\n\t\tconst button_props = {\n\t\t\ttype: 'submit',\n\t\t\tonclick: () => {}\n\t\t};\n\n\t\tObject.defineProperty(button_props, 'enhance', {\n\t\t\tvalue: () => {\n\t\t\t\treturn { type: 'submit', formaction: instance.buttonProps.formaction, onclick: () => {} };\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(instance, 'buttonProps', {\n\t\t\tvalue: button_props\n\t\t});\n\n\t\t/** @type {RemoteInfo} */\n\t\tconst __ = {\n\t\t\ttype: 'form',\n\t\t\tname: '',\n\t\t\tid: '',\n\t\t\t/** @param {FormData} form_data */\n\t\t\tfn: async (form_data) => {\n\t\t\t\tconst validate_only = form_data.get('sveltekit:validate_only') === 'true';\n\t\t\t\tform_data.delete('sveltekit:validate_only');\n\n\t\t\t\tlet data = maybe_fn ? convert_formdata(form_data) : undefined;\n\n\t\t\t\t// TODO 3.0 remove this warning\n\t\t\t\tif (DEV && !data) {\n\t\t\t\t\tconst error = () => {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Remote form functions no longer get passed a FormData object. ' +\n\t\t\t\t\t\t\t\t\"`form` now has the same signature as `query` or `command`, i.e. it expects to be invoked like `form(schema, callback)` or `form('unchecked', callback)`. \" +\n\t\t\t\t\t\t\t\t'The payload of the callback function is now a POJO instead of a FormData object. See https://kit.svelte.dev/docs/remote-functions#form for details.'\n\t\t\t\t\t\t);\n\t\t\t\t\t};\n\t\t\t\t\tdata = {};\n\t\t\t\t\tfor (const key of [\n\t\t\t\t\t\t'append',\n\t\t\t\t\t\t'delete',\n\t\t\t\t\t\t'entries',\n\t\t\t\t\t\t'forEach',\n\t\t\t\t\t\t'get',\n\t\t\t\t\t\t'getAll',\n\t\t\t\t\t\t'has',\n\t\t\t\t\t\t'keys',\n\t\t\t\t\t\t'set',\n\t\t\t\t\t\t'values'\n\t\t\t\t\t]) {\n\t\t\t\t\t\tObject.defineProperty(data, key, { get: error });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/** @type {{ input?: Record<string, string | string[]>, issues?: Record<string, StandardSchemaV1.Issue[]>, result: Output }} */\n\t\t\t\tconst output = {};\n\n\t\t\t\tconst { event, state } = get_request_store();\n\t\t\t\tconst validated = await schema?.['~standard'].validate(data);\n\n\t\t\t\tif (validate_only) {\n\t\t\t\t\treturn validated?.issues ?? [];\n\t\t\t\t}\n\n\t\t\t\tif (validated?.issues !== undefined) {\n\t\t\t\t\toutput.issues = flatten_issues(validated.issues);\n\t\t\t\t\toutput.input = {};\n\n\t\t\t\t\tfor (let key of form_data.keys()) {\n\t\t\t\t\t\t// redact sensitive fields\n\t\t\t\t\t\tif (/^[.\\]]?_/.test(key)) continue;\n\n\t\t\t\t\t\tconst is_array = key.endsWith('[]');\n\t\t\t\t\t\tconst values = form_data.getAll(key).filter((value) => typeof value === 'string');\n\n\t\t\t\t\t\tif (is_array) key = key.slice(0, -2);\n\n\t\t\t\t\t\toutput.input[key] = is_array ? values : values[0];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (validated !== undefined) {\n\t\t\t\t\t\tdata = validated.value;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.refreshes ??= {};\n\n\t\t\t\t\toutput.result = await run_remote_function(event, state, true, data, (d) => d, fn);\n\t\t\t\t}\n\n\t\t\t\t// We don't need to care about args or deduplicating calls, because uneval results are only relevant in full page reloads\n\t\t\t\t// where only one form submission is active at the same time\n\t\t\t\tif (!event.isRemoteRequest) {\n\t\t\t\t\tget_cache(__, state)[''] ??= output;\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\t\t\t}\n\t\t};\n\n\t\tObject.defineProperty(instance, '__', { value: __ });\n\n\t\tObject.defineProperty(instance, 'action', {\n\t\t\tget: () => `?/remote=${__.id}`,\n\t\t\tenumerable: true\n\t\t});\n\n\t\tObject.defineProperty(button_props, 'formaction', {\n\t\t\tget: () => `?/remote=${__.id}`,\n\t\t\tenumerable: true\n\t\t});\n\n\t\tfor (const property of ['input', 'issues']) {\n\t\t\tObject.defineProperty(instance, property, {\n\t\t\t\tget() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn get_cache(__)?.['']?.[property] ?? {};\n\t\t\t\t\t} catch {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tObject.defineProperty(instance, 'result', {\n\t\t\tget() {\n\t\t\t\ttry {\n\t\t\t\t\treturn get_cache(__)?.['']?.result;\n\t\t\t\t} catch {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// On the server, pending is always 0\n\t\tObject.defineProperty(instance, 'pending', {\n\t\t\tget: () => 0\n\t\t});\n\n\t\t// On the server, buttonProps.pending is always 0\n\t\tObject.defineProperty(button_props, 'pending', {\n\t\t\tget: () => 0\n\t\t});\n\n\t\tObject.defineProperty(instance, 'field', {\n\t\t\tvalue: (/** @type {string} */ name) => name\n\t\t});\n\n\t\tObject.defineProperty(instance, 'preflight', {\n\t\t\t// preflight is a noop on the server\n\t\t\tvalue: () => instance\n\t\t});\n\n\t\tObject.defineProperty(instance, 'validate', {\n\t\t\tvalue: () => {\n\t\t\t\tthrow new Error('Cannot call validate() on the server');\n\t\t\t}\n\t\t});\n\n\t\tif (key == undefined) {\n\t\t\tObject.defineProperty(instance, 'for', {\n\t\t\t\t/** @type {RemoteForm<any, any>['for']} */\n\t\t\t\tvalue: (key) => {\n\t\t\t\t\tconst { state } = get_request_store();\n\t\t\t\t\tconst cache_key = __.id + '|' + JSON.stringify(key);\n\t\t\t\t\tlet instance = (state.form_instances ??= new Map()).get(cache_key);\n\n\t\t\t\t\tif (!instance) {\n\t\t\t\t\t\tinstance = create_instance(key);\n\t\t\t\t\t\tinstance.__.id = `${__.id}/${encodeURIComponent(JSON.stringify(key))}`;\n\t\t\t\t\t\tinstance.__.name = __.name;\n\n\t\t\t\t\t\tstate.form_instances.set(cache_key, instance);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn instance;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn instance;\n\t}\n\n\treturn create_instance();\n}\n","/** @import { RemoteResource, RemotePrerenderFunction } from '@sveltejs/kit' */\n/** @import { RemotePrerenderInputsGenerator, RemoteInfo, MaybePromise } from 'types' */\n/** @import { StandardSchemaV1 } from '@standard-schema/spec' */\nimport { error, json } from '@sveltejs/kit';\nimport { DEV } from 'esm-env';\nimport { get_request_store } from '@sveltejs/kit/internal/server';\nimport { stringify, stringify_remote_arg } from '../../../shared.js';\nimport { app_dir, base } from '$app/paths/internal/server';\nimport {\n\tcreate_validator,\n\tget_cache,\n\tget_response,\n\tparse_remote_response,\n\trun_remote_function\n} from './shared.js';\n\n/**\n * Creates a remote prerender function. When called from the browser, the function will be invoked on the server via a `fetch` call.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#prerender) for full documentation.\n *\n * @template Output\n * @overload\n * @param {() => MaybePromise<Output>} fn\n * @param {{ inputs?: RemotePrerenderInputsGenerator<void>, dynamic?: boolean }} [options]\n * @returns {RemotePrerenderFunction<void, Output>}\n * @since 2.27\n */\n/**\n * Creates a remote prerender function. When called from the browser, the function will be invoked on the server via a `fetch` call.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#prerender) for full documentation.\n *\n * @template Input\n * @template Output\n * @overload\n * @param {'unchecked'} validate\n * @param {(arg: Input) => MaybePromise<Output>} fn\n * @param {{ inputs?: RemotePrerenderInputsGenerator<Input>, dynamic?: boolean }} [options]\n * @returns {RemotePrerenderFunction<Input, Output>}\n * @since 2.27\n */\n/**\n * Creates a remote prerender function. When called from the browser, the function will be invoked on the server via a `fetch` call.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#prerender) for full documentation.\n *\n * @template {StandardSchemaV1} Schema\n * @template Output\n * @overload\n * @param {Schema} schema\n * @param {(arg: StandardSchemaV1.InferOutput<Schema>) => MaybePromise<Output>} fn\n * @param {{ inputs?: RemotePrerenderInputsGenerator<StandardSchemaV1.InferInput<Schema>>, dynamic?: boolean }} [options]\n * @returns {RemotePrerenderFunction<StandardSchemaV1.InferInput<Schema>, Output>}\n * @since 2.27\n */\n/**\n * @template Input\n * @template Output\n * @param {any} validate_or_fn\n * @param {any} [fn_or_options]\n * @param {{ inputs?: RemotePrerenderInputsGenerator<Input>, dynamic?: boolean }} [maybe_options]\n * @returns {RemotePrerenderFunction<Input, Output>}\n * @since 2.27\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function prerender(validate_or_fn, fn_or_options, maybe_options) {\n\tconst maybe_fn = typeof fn_or_options === 'function' ? fn_or_options : undefined;\n\n\t/** @type {typeof maybe_options} */\n\tconst options = maybe_options ?? (maybe_fn ? undefined : fn_or_options);\n\n\t/** @type {(arg?: Input) => MaybePromise<Output>} */\n\tconst fn = maybe_fn ?? validate_or_fn;\n\n\t/** @type {(arg?: any) => MaybePromise<Input>} */\n\tconst validate = create_validator(validate_or_fn, maybe_fn);\n\n\t/** @type {RemoteInfo} */\n\tconst __ = {\n\t\ttype: 'prerender',\n\t\tid: '',\n\t\tname: '',\n\t\thas_arg: !!maybe_fn,\n\t\tinputs: options?.inputs,\n\t\tdynamic: options?.dynamic\n\t};\n\n\t/** @type {RemotePrerenderFunction<Input, Output> & { __: RemoteInfo }} */\n\tconst wrapper = (arg) => {\n\t\t/** @type {Promise<Output> & Partial<RemoteResource<Output>>} */\n\t\tconst promise = (async () => {\n\t\t\tconst { event, state } = get_request_store();\n\t\t\tconst payload = stringify_remote_arg(arg, state.transport);\n\t\t\tconst id = __.id;\n\t\t\tconst url = `${base}/${app_dir}/remote/${id}${payload ? `/${payload}` : ''}`;\n\n\t\t\tif (!state.prerendering && !DEV && !event.isRemoteRequest) {\n\t\t\t\ttry {\n\t\t\t\t\treturn await get_response(__, arg, state, async () => {\n\t\t\t\t\t\tconst key = stringify_remote_arg(arg, state.transport);\n\t\t\t\t\t\tconst cache = get_cache(__, state);\n\n\t\t\t\t\t\t// TODO adapters can provide prerendered data more efficiently than\n\t\t\t\t\t\t// fetching from the public internet\n\t\t\t\t\t\tconst promise = (cache[key] ??= fetch(new URL(url, event.url.origin).href).then(\n\t\t\t\t\t\t\tasync (response) => {\n\t\t\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\t\t\tthrow new Error('Prerendered response not found');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst prerendered = await response.json();\n\n\t\t\t\t\t\t\t\tif (prerendered.type === 'error') {\n\t\t\t\t\t\t\t\t\terror(prerendered.status, prerendered.error);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn prerendered.result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t));\n\n\t\t\t\t\t\treturn parse_remote_response(await promise, state.transport);\n\t\t\t\t\t});\n\t\t\t\t} catch {\n\t\t\t\t\t// not available prerendered, fallback to normal function\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (state.prerendering?.remote_responses.has(url)) {\n\t\t\t\treturn /** @type {Promise<any>} */ (state.prerendering.remote_responses.get(url));\n\t\t\t}\n\n\t\t\tconst promise = get_response(__, arg, state, () =>\n\t\t\t\trun_remote_function(event, state, false, arg, validate, fn)\n\t\t\t);\n\n\t\t\tif (state.prerendering) {\n\t\t\t\tstate.prerendering.remote_responses.set(url, promise);\n\t\t\t}\n\n\t\t\tconst result = await promise;\n\n\t\t\tif (state.prerendering) {\n\t\t\t\tconst body = { type: 'result', result: stringify(result, state.transport) };\n\t\t\t\tstate.prerendering.dependencies.set(url, {\n\t\t\t\t\tbody: JSON.stringify(body),\n\t\t\t\t\tresponse: json(body)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// TODO this is missing error/loading/current/status\n\t\t\treturn result;\n\t\t})();\n\n\t\tpromise.catch(() => {});\n\n\t\treturn /** @type {RemoteResource<Output>} */ (promise);\n\t};\n\n\tObject.defineProperty(wrapper, '__', { value: __ });\n\n\treturn wrapper;\n}\n","/** @import { RemoteQuery, RemoteQueryFunction } from '@sveltejs/kit' */\n/** @import { RemoteInfo, MaybePromise } from 'types' */\n/** @import { StandardSchemaV1 } from '@standard-schema/spec' */\nimport { get_request_store } from '@sveltejs/kit/internal/server';\nimport { create_remote_cache_key, stringify_remote_arg } from '../../../shared.js';\nimport { prerendering } from '__sveltekit/environment';\nimport { create_validator, get_cache, get_response, run_remote_function } from './shared.js';\n\n/**\n * Creates a remote query. When called from the browser, the function will be invoked on the server via a `fetch` call.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#query) for full documentation.\n *\n * @template Output\n * @overload\n * @param {() => MaybePromise<Output>} fn\n * @returns {RemoteQueryFunction<void, Output>}\n * @since 2.27\n */\n/**\n * Creates a remote query. When called from the browser, the function will be invoked on the server via a `fetch` call.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#query) for full documentation.\n *\n * @template Input\n * @template Output\n * @overload\n * @param {'unchecked'} validate\n * @param {(arg: Input) => MaybePromise<Output>} fn\n * @returns {RemoteQueryFunction<Input, Output>}\n * @since 2.27\n */\n/**\n * Creates a remote query. When called from the browser, the function will be invoked on the server via a `fetch` call.\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#query) for full documentation.\n *\n * @template {StandardSchemaV1} Schema\n * @template Output\n * @overload\n * @param {Schema} schema\n * @param {(arg: StandardSchemaV1.InferOutput<Schema>) => MaybePromise<Output>} fn\n * @returns {RemoteQueryFunction<StandardSchemaV1.InferInput<Schema>, Output>}\n * @since 2.27\n */\n/**\n * @template Input\n * @template Output\n * @param {any} validate_or_fn\n * @param {(args?: Input) => MaybePromise<Output>} [maybe_fn]\n * @returns {RemoteQueryFunction<Input, Output>}\n * @since 2.27\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function query(validate_or_fn, maybe_fn) {\n\t/** @type {(arg?: Input) => Output} */\n\tconst fn = maybe_fn ?? validate_or_fn;\n\n\t/** @type {(arg?: any) => MaybePromise<Input>} */\n\tconst validate = create_validator(validate_or_fn, maybe_fn);\n\n\t/** @type {RemoteInfo} */\n\tconst __ = { type: 'query', id: '', name: '' };\n\n\t/** @type {RemoteQueryFunction<Input, Output> & { __: RemoteInfo }} */\n\tconst wrapper = (arg) => {\n\t\tif (prerendering) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot call query '${__.name}' while prerendering, as prerendered pages need static data. Use 'prerender' from $app/server instead`\n\t\t\t);\n\t\t}\n\n\t\tconst { event, state } = get_request_store();\n\n\t\t/** @type {Promise<any> & Partial<RemoteQuery<any>>} */\n\t\tconst promise = get_response(__, arg, state, () =>\n\t\t\trun_remote_function(event, state, false, arg, validate, fn)\n\t\t);\n\n\t\tpromise.catch(() => {});\n\n\t\t/** @param {Output} value */\n\t\tpromise.set = (value) => {\n\t\t\tconst { state } = get_request_store();\n\t\t\tconst refreshes = state.refreshes;\n\n\t\t\tif (!refreshes) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot call set on query '${__.name}' because it is not executed in the context of a command/form remote function`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst cache = get_cache(__, state);\n\t\t\tconst key = stringify_remote_arg(arg, state.transport);\n\n\t\t\tif (__.id) {\n\t\t\t\trefreshes[__.id + '/' + key] = cache[key] = Promise.resolve(value);\n\t\t\t}\n\t\t};\n\n\t\tpromise.refresh = () => {\n\t\t\tconst { state } = get_request_store();\n\t\t\tconst refreshes = state.refreshes;\n\n\t\t\tif (!refreshes) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot call refresh on query '${__.name}' because it is not executed in the context of a command/form remote function`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst cache_key = create_remote_cache_key(__.id, stringify_remote_arg(arg, state.transport));\n\t\t\trefreshes[cache_key] = promise;\n\n\t\t\t// TODO we could probably just return promise here, but would need to update the types\n\t\t\treturn promise.then(() => {});\n\t\t};\n\n\t\tpromise.withOverride = () => {\n\t\t\tthrow new Error(`Cannot call '${__.name}.withOverride()' on the server`);\n\t\t};\n\n\t\treturn /** @type {RemoteQuery<Output>} */ (promise);\n\t};\n\n\tObject.defineProperty(wrapper, '__', { value: __ });\n\n\treturn wrapper;\n}\n\n/**\n * Creates a batch query function that collects multiple calls and executes them in a single request\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#query.batch) for full documentation.\n *\n * @template Input\n * @template Output\n * @overload\n * @param {'unchecked'} validate\n * @param {(args: Input[]) => MaybePromise<(arg: Input, idx: number) => Output>} fn\n * @returns {RemoteQueryFunction<Input, Output>}\n * @since 2.35\n */\n/**\n * Creates a batch query function that collects multiple calls and executes them in a single request\n *\n * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#query.batch) for full documentation.\n *\n * @template {StandardSchemaV1} Schema\n * @template Output\n * @overload\n * @param {Schema} schema\n * @param {(args: StandardSchemaV1.InferOutput<Schema>[]) => MaybePromise<(arg: StandardSchemaV1.InferOutput<Schema>, idx: number) => Output>} fn\n * @returns {RemoteQueryFunction<StandardSchemaV1.InferInput<Schema>, Output>}\n * @since 2.35\n */\n/**\n * @template Input\n * @template Output\n * @param {any} validate_or_fn\n * @param {(args?: Input[]) => MaybePromise<(arg: Input, idx: number) => Output>} [maybe_fn]\n * @returns {RemoteQueryFunction<Input, Output>}\n * @since 2.35\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction batch(validate_or_fn, maybe_fn) {\n\t/** @type {(args?: Input[]) => (arg: Input, idx: number) => Output} */\n\tconst fn = maybe_fn ?? validate_or_fn;\n\n\t/** @type {(arg?: any) => MaybePromise<Input>} */\n\tconst validate = create_validator(validate_or_fn, maybe_fn);\n\n\t/** @type {RemoteInfo & { type: 'query_batch' }} */\n\tconst __ = {\n\t\ttype: 'query_batch',\n\t\tid: '',\n\t\tname: '',\n\t\trun: (args) => {\n\t\t\tconst { event, state } = get_request_store();\n\n\t\t\treturn run_remote_function(\n\t\t\t\tevent,\n\t\t\t\tstate,\n\t\t\t\tfalse,\n\t\t\t\targs,\n\t\t\t\t(array) => Promise.all(array.map(validate)),\n\t\t\t\tfn\n\t\t\t);\n\t\t}\n\t};\n\n\t/** @type {{ args: any[], resolvers: Array<{resolve: (value: any) => void, reject: (error: any) => void}> }} */\n\tlet batching = { args: [], resolvers: [] };\n\n\t/** @type {RemoteQueryFunction<Input, Output> & { __: RemoteInfo }} */\n\tconst wrapper = (arg) => {\n\t\tif (prerendering) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot call query.batch '${__.name}' while prerendering, as prerendered pages need static data. Use 'prerender' from $app/server instead`\n\t\t\t);\n\t\t}\n\n\t\tconst { event, state } = get_request_store();\n\n\t\t/** @type {Promise<any> & Partial<RemoteQuery<any>>} */\n\t\tconst promise = get_response(__, arg, state, () => {\n\t\t\t// Collect all the calls to the same query in the same macrotask,\n\t\t\t// then execute them as one backend request.\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t// We don't need to deduplicate args here, because get_response already caches/reuses identical calls\n\t\t\t\tbatching.args.push(arg);\n\t\t\t\tbatching.resolvers.push({ resolve, reject });\n\n\t\t\t\tif (batching.args.length > 1) return;\n\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tconst batched = batching;\n\t\t\t\t\tbatching = { args: [], resolvers: [] };\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst get_result = await run_remote_function(\n\t\t\t\t\t\t\tevent,\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tbatched.args,\n\t\t\t\t\t\t\t(array) => Promise.all(array.map(validate)),\n\t\t\t\t\t\t\tfn\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfor (let i = 0; i < batched.resolvers.length; i++) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbatched.resolvers[i].resolve(get_result(batched.args[i], i));\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tbatched.resolvers[i].reject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tfor (const resolver of batched.resolvers) {\n\t\t\t\t\t\t\tresolver.reject(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t});\n\t\t});\n\n\t\tpromise.catch(() => {});\n\n\t\tpromise.refresh = async () => {\n\t\t\tconst { state } = get_request_store();\n\t\t\tconst refreshes = state.refreshes;\n\n\t\t\tif (!refreshes) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Cannot call refresh on query.batch '${__.name}' because it is not executed in the context of a command/form remote function`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst cache_key = create_remote_cache_key(__.id, stringify_remote_arg(arg, state.transport));\n\t\t\trefreshes[cache_key] = await /** @type {Promise<any>} */ (promise);\n\t\t};\n\n\t\tpromise.withOverride = () => {\n\t\t\tthrow new Error(`Cannot call '${__.name}.withOverride()' on the server`);\n\t\t};\n\n\t\treturn /** @type {RemoteQuery<Output>} */ (promise);\n\t};\n\n\tObject.defineProperty(wrapper, '__', { value: __ });\n\n\treturn wrapper;\n}\n\n// Add batch as a property to the query function\nObject.defineProperty(query, 'batch', { value: batch, enumerable: true });\n"],"names":["key","instance","promise","state","error"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}